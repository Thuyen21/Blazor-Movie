using Microsoft.JSInterop;
using System.Net.Http.Json;

namespace MovieClient.Pages;

public partial class DepositCustomer
{
    /* A variable that is used to display the result of the transaction. */
    private string? content;

    /* A variable that is used to store the amount of money that the user wants to deposit. */
    private double cash = 0;
    /* Used to store the client token that is generated by the server. */
    private string? clientToken;
    /* Used to hide the div element that is used to display the result of the transaction. */
    private string divCSS = "display: none;";
    /// <summary>
    /// It sets the divCSS variable to the value of the divCSS parameter.
    /// </summary>
    /// <param name="divCSS">The CSS class to be applied to the div that wraps the textbox.</param>
    private void DivCSS(string divCSS)
    {
        this.divCSS = divCSS;
    }
    /* Used to store a reference to the current instance of the class. */
    private DotNetObjectReference<DepositCustomer>? objRef;
    /* Used to check if the user has entered the amount of money that he wants to deposit. */
    private bool doneCash = false;
    /// <summary>
    /// It sets the content to null, sets the doneCash to false, sets the cash to 0, and sets the DivCSS
    /// to "display: none;"
    /// </summary>
    /// <returns>
    /// A Task object.
    /// </returns>
    private Task Recharge()
    {
        content = null;
        doneCash = false;
        cash = 0;
        DivCSS("display: none;");
        return Task.CompletedTask;
    }
    /// <summary>
    /// It gets a client token from the server, then calls a javascript function with the client token
    /// and the amount of cash to deposit
    /// </summary>
    private async Task Cash()
    {
        try
        {
            doneCash = true;
            clientToken = new string(await _httpClient.GetFromJsonAsync<char[]>("Customer/Deposit"));
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("Deposit", objRef, clientToken, cash);
            DivCSS("display: block;");
        }
        catch (Exception)
        {
        }
    }

    /// <summary>
    /// It's a C# function that is called from a JS function. The JS function is called from a button
    /// click. The button click is in a Blazor component. The Blazor component is in a Blazor page. The
    /// Blazor page is in a Blazor project. The Blazor project is in a solution. The solution is in a
    /// folder. The folder is on a computer. The computer is in a house. The house is in a neighborhood.
    /// The neighborhood is in a city. The city is in a state. The state is in a country. The country is
    /// on a continent. The continent is on a planet. The planet is in a solar system. The solar system
    /// is in a galaxy. The galaxy is in the universe. The universe is in a multiverse. The multiverse
    /// is in a metaverse. The metaverse is in a megaverse. The megaverse is in a hyperverse. The
    /// hyperverse is in a verse. The
    /// </summary>
    /// <param name="test">"test"</param>
    /// <param name="test2">"test2"</param>
    /// <param name="test3">The name of the controller</param>
    [JSInvokable]
    public async Task Test(string test, string test2, string test3)
    {
        HttpResponseMessage? response = await _httpClient.PostAsJsonAsync($"Customer/{test3}", new List<string>()
            {test, test2});
        content = await response.Content.ReadAsStringAsync();
        StateHasChanged();
    }
}
