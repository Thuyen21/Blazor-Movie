<h3>StudioCreateMovie</h3>
@attribute [Authorize(Roles = "Studio")]
@page "/CreateStudio"

<PageTitle>Create Movie</PageTitle>

@*<EditForm Model="@movie" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    MovieGenre
    <InputText @bind-Value="@movie.MovieGenre" /><br>
    MovieName
    <InputText @bind-Value="@movie.MovieName" /><br>
    PremiereDate
    <InputDate @bind-Value="@movie.PremiereDate" /><br>
    MoviesDescription
    <InputText @bind-Value="@movie.MoviesDescription" /><br>
    <button type="submit">Submit</button>
    </EditForm>
    <div>@content</div>
*@

<head>
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css"
        integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossOrigin="anonymous" />
</head>
<div class="container">
    <form class="login-form" autocomplete="off" action="#">
        <EditForm Model="@movie" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <a style="font-weight: 600;">Gender </a>
            <input type="text" placeholder="Type gender of movie" @bind="@movie.MovieGenre" />
            <a style="font-weight: 600;">Name </a>
            <input type="text" placeholder="Type name of movie" @bind="@movie.MovieName" />
            <a style="font-weight: 600;">Description</a>
            <textarea style="outline:1px;" rows="9" cols="70" type="text" placeholder="Type description of movie"
                @bind="@movie.MoviesDescription" />
            <a style="font-weight: 600;">Premiere Date</a>
            <input type="date" @bind="@movie.PremiereDate" />
            <button>Submit</button>
        </EditForm>
        	@if (showAlert)
{
    <MudAlert Severity="severity" Variant="Variant.Filled" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">@content</MudAlert>
}
    </form>
</div>

@code{
        private readonly MovieModel movie = new();
        private string? content;
        private bool showAlert = false;
        private Severity severity;
        private void CloseAlert()
        {
            showAlert = false;
        }

        private async Task HandleValidSubmit()
        {
            HttpResponseMessage response = await _httpClient.PostAsJsonAsync<MovieModel>("Studio/Upload", movie);
            content = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                severity = Severity.Success;
            }
            else
            {
                severity = Severity.Error;
            }

            showAlert = true;
        }

        protected override async Task OnInitializedAsync()
        {
            movie.PremiereDate = DateTime.Now;
        }
}