<h3>MovieStudio</h3>
@page "/MovieStudio"
@attribute [Authorize(Roles ="Studio")]
<input placeholder="Enter your text" @bind-value="@searchString" />

    <button class="btn btn-primary" @onclick="OnInitializedAsync">Search</button>

@if(movies == null)
{
    <div>Loading</div>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>MovieId</th>
           
            <th>StudioId</th>
            <th><button class="btn btn-primary" @onclick="GenreSortParm">MovieGenre</button></th>
            <th><button class="btn btn-primary" @onclick="NameSortParm">MovieName</button></th>
             <th><button class="btn btn-primary" @onclick="DateSortParm">PremiereDate</button></th>
            <th></th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in movies)
        {
            <tr>
                <td>@item.MovieId</td>
                
                <td>@item.StudioId</td>
                <td>@item.MovieGenre</td>
                 <td>@item.MovieName</td>
                 <td>@item.PremiereDate.ToShortDateString()</td>
                 @{ var linkEdit = $"EditMovieStudio/{item.MovieId}"; var linkBan = $"DeleteMovieStudio/{item.MovieId}";}
                 <td><NavLink class="nav-link" href="@linkEdit">Edit</NavLink></td>
                 <td><NavLink class="nav-link" href="@linkBan">Delete</NavLink> </td>
            </tr>
        }
        </tbody>
    </table>

    
}

@code {
    protected List<MovieModel> movies = new();
    protected string NameSort ="name";
    protected string DateSort ="date";
     protected string GenreSort ="genre";
    protected string sortOrder = "Id";
    protected string searchString { get; set; }

    protected async Task NameSortParm()
    {
        sortOrder = NameSort;
        NameSort = NameSort == "name" ? "nameDesc" : "name";
        searchString = " ";
        await OnInitializedAsync();
    }

    protected async Task DateSortParm()
    {
        sortOrder = DateSort;
        DateSort = DateSort == "date" ? "dateDesc" : "date";
        searchString = " ";
        await OnInitializedAsync();
    }
    protected async Task GenreSortParm()
    {
        sortOrder = GenreSort;
        GenreSort = GenreSort == "genre" ? "genreDesc" : "genre";
        searchString = " ";
        await OnInitializedAsync();
    }
    protected override async Task OnInitializedAsync()
    {       
        if(string.IsNullOrEmpty(searchString))
        {
            if(string.IsNullOrEmpty(sortOrder))
            movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>("Studio/Index/ /{no}");
            else
            movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/ /{sortOrder}");
        }
        else
        {
             movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/{searchString}/{sortOrder}");
        }
        
    }
}