@page "/MovieStudio"
@attribute [Authorize(Roles = "Studio")]
@using Firebase.Storage
<PageTitle>Studio - Movie Management</PageTitle>

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>



@*<input placeholder="Enter your text" @bind-value="@searchString" />
    <button class="btn btn-primary" @onclick="Search">Search</button>*@

<div class=container>
    <nav>
        <div class="sidebar-button">
            <span class="dashboard">MovieStudio</span>
        </div>
        <div class="search-box" style="margin-right:20%">
            <input type="text" placeholder="Search..." @bind="@searchString">
            <i class='bx bx-search' @onclick="Search"></i>
        </div>
        @*<div></div><div></div>*@
    </nav>
</div>






@if (movies == null)
{
    <div>Loading</div>
}
else
{
    @*<table class="table">
        <thead>
        <tr>
        <th>MovieId</th>

        <th>StudioId</th>
        <th><button class="btn btn-primary" @onclick="GenreSortParm">MovieGenre</button></th>
        <th><button class="btn btn-primary" @onclick="NameSortParm">MovieName</button></th>
        <th><button class="btn btn-primary" @onclick="DateSortParm">PremiereDate</button></th>
        <th></th>
        <th></th>
        <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in movies)
        {
        <tr>
        <td>@item.MovieId</td>

        <td>@item.StudioId</td>
        <td>@item.MovieGenre</td>
        <td>@item.MovieName</td>
        <td>@item.PremiereDate.ToShortDateString()</td>
        @{
        var linkEdit = $"EditMovieStudio/{item.MovieId}"; var linkBan = $"DeleteMovieStudio/{item.MovieId}"; var linkStatus =
        $"StatusStudio/{item.MovieId}";
        }
        <td><NavLink class="nav-link" href="@linkEdit">Edit</NavLink></td>
        <td><NavLink class="nav-link" href="@linkBan">Delete</NavLink> </td>
        <td><NavLink class="nav-link" href="@linkStatus">Status</NavLink> </td>
        </tr>
        }
        </tbody>
        </table>*@
    <div class=container>
        <button class="btn btn-primary" @onclick="GenreSortParm">MovieGenre</button>
        <button class="btn btn-primary" @onclick="NameSortParm">MovieName</button>
        <button class="btn btn-primary" @onclick="DateSortParm">PremiereDate</button>
    </div>


    <div class="container">
        <div class="row row-cols-1 row-cols-md-3 g-4" style="padding:30px; border-radius: 12px">
            @foreach (var item in movies)
            {
                <div class="col">
                    <div class="card h-100">
                        <img src="@DicImageLink[item.MovieId]" class="card-img-top" alt="..." />
                        <div class="card-body">
                            <h1 class="card-title">@item.MovieName</h1>
                            <p class="card-text">
                                @item.MoviesDescription
                            </p>
                            <h5 class="card-text">Gender: @item.MovieGenre</h5>
                            <h6 class="card-text">Premiere Date: @item.PremiereDate.ToShortDateString()</h6>
                        </div>
                        <div class="card-footer">
                            @{
                                var linkEdit = $"EditMovieStudio/{item.MovieId}"; var linkBan = $"DeleteMovieStudio/{item.MovieId}";
                                var linkStatus = $"StatusStudio/{item.MovieId}";
                            }
                            <a href="@linkEdit" class="btn btn-primary">Edit</a>
                            <a href="@linkBan" class="btn btn-danger">Delete</a>
                            <a href="@linkStatus" class="btn btn-success">Status</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <button class="btn btn-primary" @onclick="LoadMore">More...</button>
}
@code{
    private List<MovieModel> movies = new();
    private int index = 0;
    private string? searchString { get; set; }

    private bool isSearch = false;
    private string sort = null;
    private readonly Dictionary<string, string> DicImageLink = new();
    private async Task NameSortParm()
    {
        index = 0;
        sort = sort == "name" ? "nameDesc" : "name";
        movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/ /{sort}/{index}");
        isSearch = false;
        searchString = null;
    }

    private async Task DateSortParm()
    {
        index = 0;
        sort = sort == "date" ? "dateDesc" : "date";
        movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/ /{sort}/{index}");
        isSearch = false;
 searchString = null;
    }

    private async Task GenreSortParm()
    {
        index = 0;
        sort = sort == "genre" ? "genreDesc" : "genre";
        movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/ /{sort}/{index}");
        isSearch = false;
        searchString = null;
    }

    protected override async Task OnInitializedAsync()
    {
        Task? moviesTask = Task.Run(async () =>
        {
            movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/ / /{index}");
        });
        char[] tokena = { };
        Task? tokenaTask = Task.Run(async () =>
        {
            tokena = await _httpClient.GetFromJsonAsync<char[]>("User/GetToken");
        });
        await Task.WhenAll(moviesTask, tokenaTask);
        string token = new string(tokena);
        //FIX
        Parallel.ForEach(movies, async item =>
        {
            DicImageLink.Add(item.MovieId, null);
            try
            {
                string ImageLink = await new FirebaseStorage("movie2-e3c7b.appspot.com", new FirebaseStorageOptions { AuthTokenAsyncFactory = async () => await Task.FromResult(await Task.FromResult(token)), ThrowOnCancel = true, HttpClientTimeout = TimeSpan.FromHours(2) }).Child(item.StudioId).Child(item.MovieId).Child("Image").GetDownloadUrlAsync();
                if (!DicImageLink.ContainsKey(item.MovieId))
                {
                    DicImageLink.Add(item.MovieId, ImageLink);
                    StateHasChanged();
                }
                else
                {
                    DicImageLink[item.MovieId] = ImageLink;
                    StateHasChanged();
                }
            }
            catch
            {
                
                
            }

        });
    }
    //ENDFIX
        private async Task Search()
        {
            index = 0;
            if (searchString != null)
            {
                movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/{searchString}/ /{index}");
                isSearch = true;
            }
            else
            {
                movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/ / /{index}");
                isSearch = false;
            }

            sort = null;
        }

        private async Task LoadMore()
        {
            index++;
            if (isSearch)
            {
                movies.AddRange(await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/{searchString}//{index}"));
            }
            else if (sort != null)
            {
                movies.AddRange(await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/ /{sort}/{index}"));
            }
            else
            {
                movies.AddRange(await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Studio/Index/ / /{index}"));
            }
        }
}








