<h3>MovieAdmin</h3>
@page "/MovieCustomer"
@using Firebase.Storage
@attribute [Authorize(Roles ="Customer")]
<input placeholder="Enter your text" @bind-value="@searchString" />

    <button class="btn btn-primary" @onclick="OnInitializedAsync">Search</button>

@if(movies == null)
{
    <div>Loading</div>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Movie Image Link</th>
            <th>MovieId</th>
           
            <th>StudioId</th>
            <th><button class="btn btn-primary" @onclick="GenreSortParm">MovieGenre</button></th>
            <th><button class="btn btn-primary" @onclick="NameSortParm">MovieName</button></th>
             <th><button class="btn btn-primary" @onclick="DateSortParm">PremiereDate</button></th>
            <th></th>
            
        </tr>
        </thead>
        <tbody>
        @foreach (var item in movies)
        {
            <tr>
                <td><img src="@DicImageLink[item.MovieId]" width="100" height="100"></td>
                
                <td>@item.MovieId</td>
                
                <td>@item.StudioId</td>
                <td>@item.MovieGenre</td>
                 <td>@item.MovieName</td>
                 <td>@item.PremiereDate.ToShortDateString()</td>
                 @{ var linkWatch = $"WatchCustomer/{item.MovieId}";}
                 <td><NavLink class="nav-link" href="@linkWatch">Watch</NavLink></td>
                 
            </tr>
        }
        </tbody>
    </table>

    
}

@code {
    public List<MovieModel> movies = new();
    public string NameSort ="name";
    public string DateSort ="date";
     public string GenreSort ="genre";
    public string sortOrder = "Id";
    public string searchString { get; set; }
    public Dictionary<string, string> DicImageLink = new();

    public async Task NameSortParm()
    {
        sortOrder = NameSort;
        NameSort = NameSort == "name" ? "nameDesc" : "name";
        searchString = " ";
        await OnInitializedAsync();
    }

    public async Task DateSortParm()
    {
        sortOrder = DateSort;
        DateSort = DateSort == "date" ? "dateDesc" : "date";
        searchString = " ";
        await OnInitializedAsync();
    }
    public async Task GenreSortParm()
    {
        sortOrder = GenreSort;
        GenreSort = GenreSort == "genre" ? "genreDesc" : "genre";
        searchString = " ";
        await OnInitializedAsync();
    }
    protected override async Task OnInitializedAsync()
    {       
        if(string.IsNullOrEmpty(searchString))
        {
            if(string.IsNullOrEmpty(sortOrder))
            movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>("Customer/Movie/ /{no}");
            else
            movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Customer/Movie/ /{sortOrder}");
        }
        else
        {
             movies = await _httpClient.GetFromJsonAsync<List<MovieModel>>($"Customer/Movie/{searchString}/{sortOrder}");
        }
        var tokena = await _httpClient.GetFromJsonAsync<char[]>("User/GetToken");
        var token = new string(tokena);

        foreach(var item in movies)
        {
            try
            {
                var ImageLink = await new FirebaseStorage("movie2-e3c7b.appspot.com",
                                new FirebaseStorageOptions
                                {
                                    AuthTokenAsyncFactory = async () => await Task.FromResult( await Task.FromResult(token)),
                                    ThrowOnCancel = true,
                                    HttpClientTimeout = TimeSpan.FromHours(2)
                                }).Child(item.StudioId).Child(item.MovieId).Child("Image").GetDownloadUrlAsync();
                                if(!DicImageLink.ContainsKey(item.MovieId))
            {
                DicImageLink.Add(item.MovieId,ImageLink);
            }
            else
                {
                    DicImageLink[item.MovieId] = ImageLink;
                }

            }
            catch
            {
                DicImageLink.Add(item.MovieId,null);
            }
            
            
        }
    }
    
}
