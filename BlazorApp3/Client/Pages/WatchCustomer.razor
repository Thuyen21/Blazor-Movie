<h3>WatchCustomer</h3>
@page "/WatchCustomer/{Id}"
@attribute [Authorize(Roles = "Customer")]
@using Firebase.Storage


<PageTitle>Xem phim</PageTitle>

	@if (showAlert)
{
    <MudAlert Severity="severity" Variant="Variant.Filled" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">@content</MudAlert>
}


<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
    <link rel="stylesheet" href="https://allyoucan.cloud/cdn/icofont/1.0.1/icofont.css"
          integrity="sha384-jbCTJB16Q17718YM9U22iJkhuGbS0Gd2LjaWb4YJEZToOPmnKDjySVa323U+W7Fv" crossorigin="anonymous">


    @if (movie == null || movieLink == null)
    {
        @if (canWatch == null)
        {
            <div>Loadding</div>
        }
        else if (canWatch == false)
        {
            string linkVip = $"BuyVip/{Id}";
            <div class="osahan-account-page-right shadow-sm bg-white p-4 h-100" style="margin: 15px;">
                <div class="bg-white card mb-4 order-list shadow-sm">
                    <h4 class="font-weight-bold mt-0 mb-4 d-flex justify-content-center" style="padding: 1%;">You need buy VIP package or only this Movie</h4>
                    <div class="d-flex justify-content-center" style="margin: 1%">
                        <NavLink class="btn btn-primary" href="@linkVip">Buy</NavLink>
                    </div>
                </div>   
            </div>
                   
        }
    }
    else
    {

        if (sameDevice)
        {
            @*<video src="@movieLink" width="1280" height="720" controls @onplay="View"></video>*@
            <div class="container">
                <div class="row">
                    <div class="col-md-5">
                        <div class="project-info-box mt-0 shadow-sm">
                            <h5>Movie Overview</h5>
                            <p class="mb-0">
                                @movie.MoviesDescription   <!-- FIX -->
                            </p>
                        </div><!-- / project-info-box -->

                        <div class="project-info-box shadow-sm">
                            <p><b>Name:</b> @movie.MovieName</p>  <!-- FIX -->
                            <p><b>Date:</b> @movie.PremiereDate.ToShortDateString()</p> <!-- FIX -->
                        </div><!-- / project-info-box -->

                        <div class="project-info-box mt-0 mb-0">

                        </div><!-- / project-info-box -->
                    </div><!-- / column -->

            <div class="col-md-7">
                        <div class="embed-responsive embed-responsive-16by9 shadow-sm">
                            <video width="640" height="360" controls="" class="rounded">
                                <source src="@movieLink"
                                type="video/mp4">
                            </video>
                        </div>
                        <div class="project-info-box shadow-sm">
                            <p><b>Genre:</b> @movie.MovieGenre</p>  <!-- FIX -->
                        </div><!-- / project-info-box -->
            </div><!-- / column -->
        </div>
            </div>
        }
    }

    <div class="container">
        <div class="row">
            <div class="col-md">
                <div class="osahan-account-page-right shadow-sm bg-white p-4 h-100">
                    <div class="tab-content" id="myTabContent">
                        <div class="tab-pane  fade  active show" id="orders" role="tabpanel"
                             aria-labelledby="orders-tab">
                            <h4 class="font-weight-bold mt-0 mb-4">Comments</h4>

                            <div class="bg-white card mb-4 order-list shadow-sm">
                                <div class="input-group" style="margin-right: 5%">
                                    <textarea type="text" class="form-control rounded" placeholder="Your comment"
                                              aria-label="Comment" aria-describedby="search-addon" @bind=@Acomment></textarea>
                                </div>
                                <div class="d-flex flex-row-reverse" style="margin: 1%">
                                    <button type="button" class="btn btn-primary" @onclick="@Com">Comment</button>
                                    <div class="d-flex justify-content-center">@content</div>
                                </div>
                            </div>

                            @if (commentList != null)
                            {
                                for (int i = 0; i < commentList.Count(); i++)
                                {
                                    <div class="bg-white card mb-4 order-list shadow-sm">
                                        <div class="gold-members p-4">
                                            <a href="#">
                                            </a>
                                            <div class="media">
                                                <a href="#">
                                                    <img class="mr-4" src="https://bootdey.com/img/Content/avatar/avatar2.png"
                                                 alt="Generic placeholder image" style="border-radius: 50%;">
                                                </a>
                                                <div class="media-body">
                                                    <a href="#" style="font-size:11px">
                                                        <span class="float-right text-info">
                                                            @commentList[i].Time <i class="icofont-check-circled text-success"></i>
                                                        </span>
                                                    </a>
                                                    <h6 class="mb-2">
                                                        <a href="#"></a>
                                                        <a href="#" class="text-black">@commentList[i].Email</a>
                                                    </h6>
                                                    <p class="text-dark">@commentList[i].CommentText</p>
                                                    @{
                                                        var local = commentList[i].Id;
                                                    }
                                                    @*<button @onclick="@(async () => await AcLike(local))">Like</button>
                                                        <button @onclick="@(async () => await AcDisLike(local))">DisLike</button>*@
                                                    <hr>

                                                    <div class="float-right">
                                                        <button class="btn btn-sm btn-primary" @onclick="@(async () => await AcLike(local))">
                                                            <i class="bi bi-hand-thumbs-up">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                                                             fill="currentColor" class="bi bi-hand-thumbs-up"
                                                             viewBox="0 0 16 16">
                                                                    <path d="M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2.144 2.144 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a9.84 9.84 0 0 0-.443.05 9.365 9.365 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111L8.864.046zM11.5 14.721H8c-.51 0-.863-.069-1.14-.164-.281-.097-.506-.228-.776-.393l-.04-.024c-.555-.339-1.198-.731-2.49-.868-.333-.036-.554-.29-.554-.55V8.72c0-.254.226-.543.62-.65 1.095-.3 1.977-.996 2.614-1.708.635-.71 1.064-1.475 1.238-1.978.243-.7.407-1.768.482-2.85.025-.362.36-.594.667-.518l.262.066c.16.04.258.143.288.255a8.34 8.34 0 0 1-.145 4.725.5.5 0 0 0 .595.644l.003-.001.014-.003.058-.014a8.908 8.908 0 0 1 1.036-.157c.663-.06 1.457-.054 2.11.164.175.058.45.3.57.65.107.308.087.67-.266 1.022l-.353.353.353.354c.043.043.105.141.154.315.048.167.075.37.075.581 0 .212-.027.414-.075.582-.05.174-.111.272-.154.315l-.353.353.353.354c.047.047.109.177.005.488a2.224 2.224 0 0 1-.505.805l-.353.353.353.354c.006.005.041.05.041.17a.866.866 0 0 1-.121.416c-.165.288-.503.56-1.066.56z" />
                                                                </svg>
                                                            </i> Like
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-primary" @onclick="@(async () => await AcDisLike(local))">
                                                            <i class="bi bi-hand-thumbs-down"></i><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                                                                                               fill="currentColor" class="bi bi-hand-thumbs-down"
                                                                                               viewBox="0 0 16 16">
                                                                <path d="M8.864 15.674c-.956.24-1.843-.484-1.908-1.42-.072-1.05-.23-2.015-.428-2.59-.125-.36-.479-1.012-1.04-1.638-.557-.624-1.282-1.179-2.131-1.41C2.685 8.432 2 7.85 2 7V3c0-.845.682-1.464 1.448-1.546 1.07-.113 1.564-.415 2.068-.723l.048-.029c.272-.166.578-.349.97-.484C6.931.08 7.395 0 8 0h3.5c.937 0 1.599.478 1.934 1.064.164.287.254.607.254.913 0 .152-.023.312-.077.464.201.262.38.577.488.9.11.33.172.762.004 1.15.069.13.12.268.159.403.077.27.113.567.113.856 0 .289-.036.586-.113.856-.035.12-.08.244-.138.363.394.571.418 1.2.234 1.733-.206.592-.682 1.1-1.2 1.272-.847.283-1.803.276-2.516.211a9.877 9.877 0 0 1-.443-.05 9.364 9.364 0 0 1-.062 4.51c-.138.508-.55.848-1.012.964l-.261.065zM11.5 1H8c-.51 0-.863.068-1.14.163-.281.097-.506.229-.776.393l-.04.025c-.555.338-1.198.73-2.49.868-.333.035-.554.29-.554.55V7c0 .255.226.543.62.65 1.095.3 1.977.997 2.614 1.709.635.71 1.064 1.475 1.238 1.977.243.7.407 1.768.482 2.85.025.362.36.595.667.518l.262-.065c.16-.04.258-.144.288-.255a8.34 8.34 0 0 0-.145-4.726.5.5 0 0 1 .595-.643h.003l.014.004.058.013a8.912 8.912 0 0 0 1.036.157c.663.06 1.457.054 2.11-.163.175-.059.45-.301.57-.651.107-.308.087-.67-.266-1.021L12.793 7l.353-.354c.043-.042.105-.14.154-.315.048-.167.075-.37.075-.581 0-.211-.027-.414-.075-.581-.05-.174-.111-.273-.154-.315l-.353-.354.353-.354c.047-.047.109-.176.005-.488a2.224 2.224 0 0 0-.505-.804l-.353-.354.353-.354c.006-.005.041-.05.041-.17a.866.866 0 0 0-.121-.415C12.4 1.272 12.063 1 11.5 1z" />
                                                            </svg> Dislike
                                                        </button>
                                                    </div>
                                                    <p class="mb-0 text-black text-primary pt-2"><span class="text-black font-weight-bold"> Total reactions:</span> @commentList[i].Like Like / @commentList[i].DisLike Dislike  </p>
                                                    <p class="mb-0 text-black text-primary pt-2"><span class="text-black font-weight-bold"> Your reaction:</span> @commentList[i].Is </p>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                } @*end for*@
                            } @*end if comment*@



                            <a class="text-center w-100 d-block mt-4 font-weight-bold" style="font-size:13px" href="#">See more Comments</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>


@code {
    [Parameter]
    public string Id { get; set; }

    private MovieModel movie;
    private string? movieLink = null;
    private bool? canWatch;
    private string Acomment;
    private string content;
    private List<CommentModel> commentList = new();
    private bool showAlert = false;
    private Severity severity;
    private bool sameDevice = false;
    private bool firstPlay = true;
    private void CloseAlert()
    {
        showAlert = false;
    }

    private int index = 0;
    protected override async Task OnInitializedAsync()
    {
        Task? movieTask = Task.Run(async () =>
        {
            movie = await _httpClient.GetFromJsonAsync<MovieModel>($"Customer/Watch/{Id}");
        });
        Task? commentTask = Task.Run(async () =>
        {
            commentList = await _httpClient.GetFromJsonAsync<List<CommentModel>>($"Customer/Comment/{Id}/{index}");
        });
        Task? sameDeviceTask = Task.Run(async () =>
        {
            sameDevice = (await _httpClient.PostAsJsonAsync<string>("Customer/UserAgent", await JS.InvokeAsync<string>("getUserAgent"))).IsSuccessStatusCode;
        });
        Task? canWatchTask = Task.Run(async () =>
        {
            canWatch = await _httpClient.GetFromJsonAsync<bool>($"Customer/CanWatch/{Id}");
            Console.WriteLine("Done");
        });
        char[] tokena = { };
        Task? tokenaTask = Task.Run(async () =>
        {
            tokena = await _httpClient.GetFromJsonAsync<char[]>("User/GetToken");
        });
        string token = new string(tokena);
        try
        {
            await Task.WhenAll(movieTask, commentTask, sameDeviceTask, canWatchTask, tokenaTask);
        }
        catch
        {
            content = "Turn off AdBlock";
            severity = Severity.Error;
            showAlert = true;
            return;
        }

        if (canWatch == true)
        {
            try
            {
                movieLink = await new FirebaseStorage("movie2-e3c7b.appspot.com", new FirebaseStorageOptions { AuthTokenAsyncFactory = async () => await Task.FromResult(await Task.FromResult(token)), ThrowOnCancel = true, HttpClientTimeout = TimeSpan.FromHours(2) }).Child(movie.StudioId).Child(movie.MovieId).Child("Movie").GetDownloadUrlAsync();
            }
            catch (Exception ex)
            {
                content = "This studio's movie file contains a mistake."; //FIX
                severity = Severity.Error;
                showAlert = true;
            }
        }
    }

    private async Task View()
    {
        if (firstPlay)
        {
            await _httpClient.PostAsJsonAsync<string>("Customer/View", Id);
            firstPlay = false;
        }

        while (true)
        {
            try
            {
                sameDevice = (await _httpClient.PostAsJsonAsync<string>("Customer/UserAgent", await JS.InvokeAsync<string>("getUserAgent"))).IsSuccessStatusCode;
            }
            catch
            {
                content = "Turn off AdBlock";
                showAlert = true;
                severity = Severity.Error;
                StateHasChanged();
                return;
            }

            if (!sameDevice)
            {
                content = "You cannot watch in many Device at the same time Logout then Login to update your last Device";
                showAlert = true;
                severity = Severity.Error;
                StateHasChanged();
            }

            await Task.Delay(60000);
        }
    }

    private async Task Com()
    {
        CommentModel up = new CommentModel()
            { Time = DateTime.UtcNow, MovieId = Id, CommentText = Acomment };
        HttpResponseMessage? response = (await _httpClient.PostAsJsonAsync<CommentModel>("Customer/Acomment", up));
        content = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            severity = Severity.Success;
        }
        else
        {
            severity = Severity.Error;
        }

        showAlert = true;
        List<CommentModel> commentListTemp = new();
        for (int i = 0; i <= index; i++)
        {
            commentListTemp.AddRange(await _httpClient.GetFromJsonAsync<List<CommentModel>>($"Customer/Comment/{Id}/{i}"));
        }

        commentList.Clear();
        commentList = commentListTemp;
        StateHasChanged();
    }

    private async Task AcDisLike(string Id)
    {
        await _httpClient.PostAsJsonAsync<string>($"Customer/ac/{Id}", "DisLike");
        List<CommentModel> commentListTemp = new();
        for (int i = 0; i <= index; i++)
        {
            commentListTemp.AddRange(await _httpClient.GetFromJsonAsync<List<CommentModel>>($"Customer/Comment/{this.Id}/{i}"));
        }

        commentList.Clear();
        commentList = commentListTemp;
        StateHasChanged();
    }

    private async Task AcLike(string Id)
    {
        await _httpClient.PostAsJsonAsync<string>($"Customer/ac/{Id}", "Like");
        List<CommentModel> commentListTemp = new();
        for (int i = 0; i <= index; i++)
        {
            commentListTemp.AddRange(await _httpClient.GetFromJsonAsync<List<CommentModel>>($"Customer/Comment/{this.Id}/{i}"));
        }

        commentList.Clear();
        commentList = commentListTemp;
        StateHasChanged();
    }

    private async Task LoadMore()
    {
        index++;
        commentList.AddRange(await _httpClient.GetFromJsonAsync<List<CommentModel>>($"Customer/Comment/{Id}/{index}"));
    }
}



