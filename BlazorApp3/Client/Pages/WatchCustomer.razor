<h3>WatchCustomer</h3>
@page "/WatchCustomer/{Id}"
@using Firebase.Storage
@if(movie == null || movieLink == null)
{
    @if(!canWatch)
    {
        string linkVip = $"BuyVip/{Id}";
        <div>Need to buy</div>      
        <div><NavLink class="nav-link" href="@linkVip">Buy</NavLink></div>
    }
    else
    {
        <div>Loadding</div>
    }
    
}
else
{
    <video src="@movieLink"  width="1280" height="720" controls></video>
}
@if (commentList != null)
{
    for(int i = 0;i < commentList.Count(); i++)
    {
        var local = commentList[i].Id;
        <div>Email: @commentList[i].Email, comment: @commentList[i].CommentText, Time: @commentList[i].Time</div>
        <div>Like = @commentList[i].Like, Dislike = @commentList[i].DisLike  </div>
        
        <button @onclick="@(async () => await AcLike(local))" >Like</button>
        <button @onclick="@(async () => await AcDisLike(local))" >DisLike</button>
    }
}


<input type="text" @bind=@Acomment>

<button @onclick="@Com" >Comment</button>

@code {
    [Parameter]
    public string Id{ get; set; }
    protected MovieModel movie;
    protected string movieLink;
    protected bool canWatch = false;
    protected string Acomment;
    protected string content;
    protected List<CommentModel> commentList = new();
    protected MyForm form = new MyForm();
    
    protected override async Task OnInitializedAsync()
    {
        
        if(Id == null)
        _navigationManager.NavigateTo("/MovieAdmin");
        movie =  await _httpClient.GetFromJsonAsync<MovieModel>($"Customer/Watch/{Id}");

        canWatch = await _httpClient.GetFromJsonAsync<bool>($"Customer/CanWatch/{Id}");

       
        commentList = await _httpClient.GetFromJsonAsync<List<CommentModel>>($"Customer/Comment/{Id}");

       
        if(canWatch)
        {
             var tokena = await _httpClient.GetFromJsonAsync<char[]>("User/GetToken");
        var token = new string(tokena);
        try
        {
            movieLink = await new FirebaseStorage("movie2-e3c7b.appspot.com",
                                new FirebaseStorageOptions
                                {
                                    AuthTokenAsyncFactory = async () => await Task.FromResult( await Task.FromResult(token)),
                                    ThrowOnCancel = true,
                                    HttpClientTimeout = TimeSpan.FromHours(2)
                                }).Child(movie.StudioId).Child(movie.MovieId).Child("Movie").GetDownloadUrlAsync();

        }
        catch
            {
                
            }
            
                             
                    
        }
        
        }
        protected async Task Com()
        {
        var up = new CommentModel() {Time = DateTime.UtcNow, MovieId = Id, CommentText = Acomment};
        content = await (await _httpClient.PostAsJsonAsync<CommentModel>("Customer/Acomment", up)).Content.ReadAsStringAsync();
        commentList = await _httpClient.GetFromJsonAsync<List<CommentModel>>($"Customer/Comment/{Id}");
    }
    protected async Task AcDisLike(string Id)
    {
        await _httpClient.PostAsJsonAsync<string>($"Customer/ac/{Id}", "DisLike");
        await OnInitializedAsync();
    }
    protected async Task AcLike(string Id)
    {
        await _httpClient.PostAsJsonAsync<string>($"Customer/ac/{Id}", "Like");
        await OnInitializedAsync();
    }
    protected class MyForm
    {
        public string MyProperty { get; set; }
    }
}

