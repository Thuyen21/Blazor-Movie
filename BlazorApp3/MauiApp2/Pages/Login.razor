@inject IJSRuntime JS
@inject IAccountService _accountService;
@page "/login"

<head>
	<meta charset="UTF-8">
	<link rel="stylesheet" href="style.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>

	<div class="container">

		<input type="checkbox" id="flip">
		<div class="cover">
			<div class="front">
				<img src="https://bvuvolunteers.org/wp-content/uploads/2021/03/coffee-and-keyboard.jpg" alt="">
				<div class="text">
					<span class="text-1">Every new friend is a <br> new adventure</span>
					<span class="text-2">Let's get connected</span>
				</div>
			</div>
			<div class="back">
				<img class="backImg" src="https://bvuvolunteers.org/wp-content/uploads/2021/03/coffee-and-keyboard.jpg"
					alt="">
				<div class="text">
					<span class="text-1">Complete miles of journey <br> with one step</span>
					<span class="text-2">Let's get started</span>
				</div>
			</div>
		</div>
		<div class="forms">
			<div class="form-content">
				<div class="login-form">
					<div class="title">Login</div>
					<form action="#">
						<div class="input-boxes">
							<EditForm Model="@login" OnValidSubmit="HandleValidSubmit">
								<DataAnnotationsValidator />
								<ValidationSummary />
								<div class="input-box">
									<i class="fas fa-envelope"></i>
									<input type="text" @bind="@login.Email" placeholder="Enter your email" required>
								</div>
								<div class="input-box">
									<i class="fas fa-lock"></i>
									<input type="password" @bind="@login.Password" placeholder="Enter your password"
										required>
								</div>
								<div class="text"><a href="/ResetPassword">Forgot password?</a></div>
								<div class="button input-box">
									<input type="submit" value="Login">
								</div>
								<div class="input-box" style="visibility: hidden;">
									<i class="fas fa-envelope"></i>
								</div>
								<div class="input-box" style="visibility: hidden;">
									<i class="fas fa-envelope" style="visibility: hidden;"></i>
								</div>
								<div class="input-box" style="visibility: hidden;">
									<i class="fas fa-envelope"></i>
								</div>
								<div class="text sign-up-text">Don't have an account? <a href="/SignUp"><label>Sigup
											now</label></a></div>
						@if (showAlert)
{
    <MudAlert Severity="severity" Variant="Variant.Filled" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">@content</MudAlert>
}
							</EditForm>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</body>

@code{
        private string divCSS = "display: none;";
        private void DivCSS(string divCSS)
        {
            this.divCSS = divCSS;
        }

        private bool showAlert = false;
        private Severity severity;
        private void CloseAlert()
        {
            showAlert = false;
        }

        private readonly LogInModel login = new LogInModel();
        private string? content;
        private async Task HandleValidSubmit()
        {
            try
            {
                string? remoteUserAgent = await JS.InvokeAsync<string>("getUserAgent");
                login.UserAgent = remoteUserAgent;
            }
            catch
            {
                content = "Turn Off AdBlock";
                severity = Severity.Error;
                showAlert = true;
                return;
            }

            HttpResponseMessage response = await _httpClient.PostAsJsonAsync<LogInModel>("user/login", login);
            if (response.IsSuccessStatusCode)
            {
                content = await response.Content.ReadAsStringAsync();
                severity = Severity.Success;
                showAlert = true;
                _accountService.Login();
                _navigationManager.NavigateTo("/");
            }
            else
            {
                content = await response.Content.ReadAsStringAsync();
                severity = Severity.Error;
                showAlert = true;
            }
        }
}