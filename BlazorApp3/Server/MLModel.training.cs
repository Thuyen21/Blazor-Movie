// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using System.Linq;

namespace BlazorApp3_Server
{
    public partial class MLModel
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            IEstimator<ITransformer> pipeline = BuildPipeline(context);
            ITransformer model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            EstimatorChain<Microsoft.ML.Transforms.KeyToValueMappingTransformer> pipeline = mlContext.Transforms.Text.FeaturizeText(@"review", @"review")
                                    .Append(mlContext.Transforms.Concatenate(@"Features", @"review"))
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(@"sentiment", @"sentiment"))
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator: mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options() { NumberOfLeaves = 10, MinimumExampleCountPerLeaf = 128, NumberOfTrees = 12289, MaximumBinCountPerFeature = 323, LearningRate = 0.00312274267498996F, FeatureFraction = 1F, LabelColumnName = @"sentiment", FeatureColumnName = @"Features" }), labelColumnName: @"sentiment"))
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(@"PredictedLabel", @"PredictedLabel"));

            return pipeline;
        }
    }
}
