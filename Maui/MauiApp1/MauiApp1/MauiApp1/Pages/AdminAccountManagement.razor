<h3>AdminAccountManagement</h3>
@page "/AdminAccountManagement"
@attribute [Authorize(Roles ="Admin")]
<input placeholder="Enter your text" @bind-value="@searchString" />

    <button class="btn btn-primary" @onclick="Search">Search</button>

@if (accs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th><button class="btn btn-primary" @onclick="EmailSortParm">Email</button></th>
            <th><button class="btn btn-primary" @onclick="NameSortParm">Name</button></th>
            <th>Role</th>
            <th><button class="btn btn-primary" @onclick="DateSortParm">Date Of Birth</button></th>
            <th>Wallet</th>
            <th></th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var acc in accs)
        {
            <tr>
                <td>@acc.Id</td>
                <td>@acc.Email</td>
                <td>@acc.Name</td>
                <td>@acc.Role</td>
                <td>@acc.DateOfBirth.ToShortDateString()</td>
                 <td>@acc.Wallet</td>
                 @{ var linkEdit = $"EditAccount/{acc.Id}"; var linkBan = $"BanAccount/{acc.Id}";}
                 <td><NavLink class="nav-link" href="@linkEdit">Edit</NavLink></td>
                 <td><NavLink class="nav-link" href="@linkBan">Ban</NavLink> </td>
            </tr>
        }
        </tbody>
    </table>
    <button @onclick="LoadMore">Click to load more</button>
}


@code
{
[Parameter]
        public List<AccountManagementModel> accs { get; set; } = new();
        protected int index = 0;
        protected string? searchString { get; set; }
        protected bool isSearch = false;

        protected string sort = null;

        protected async Task NameSortParm()
        {
            index = 0;
            sort = sort == "name" ? "nameDesc" : "name";
            accs = await _httpClient.GetFromJsonAsync<List<AccountManagementModel>>($"Admin/AccountManagement/ /{sort}/{index}");
            isSearch = false;
            searchString = null;




        }

        protected async Task DateSortParm()
        {
            index = 0;
            sort = sort == "date" ? "dateDesc" : "date";
            accs = await _httpClient.GetFromJsonAsync<List<AccountManagementModel>>($"Admin/AccountManagement/ /{sort}/{index}");
            isSearch = false;
            searchString = null;



        }

        protected async Task EmailSortParm()
        {
            index = 0;
            sort = sort == "email" ? "emailDesc" : "email";
            accs = await _httpClient.GetFromJsonAsync<List<AccountManagementModel>>($"Admin/AccountManagement/ /{sort}/{index}");
            isSearch = false;
            searchString = null;



        }
        protected async Task Search()
        {
            index = 0;
            if (searchString != null)
            {
                accs = await _httpClient.GetFromJsonAsync<List<AccountManagementModel>>($"admin/AccountManagement/{searchString}/ /{index}");
                isSearch = true;
            }
            else
            {
                accs = await _httpClient.GetFromJsonAsync<List<AccountManagementModel>>($"admin/AccountManagement/ / /{index}");
                isSearch = false;
            }


            sort = null;
        }
        protected override async Task OnInitializedAsync()
        {
            accs = await _httpClient.GetFromJsonAsync<List<AccountManagementModel>>($"admin/AccountManagement/ / /{index}");

        }
        protected async Task LoadMore()
        {
            index++;
            if (isSearch)
            {
                accs.AddRange(await _httpClient.GetFromJsonAsync<List<AccountManagementModel>>($"admin/AccountManagement/{searchString}//{index}"));
            }
            else if (sort != null)
            {
                accs.AddRange(await _httpClient.GetFromJsonAsync<List<AccountManagementModel>>($"admin/AccountManagement/ /{sort}/{index}"));
            }
            else
            {
                accs.AddRange(await _httpClient.GetFromJsonAsync<List<AccountManagementModel>>($"admin/AccountManagement/ / /{index}"));
            }

        }
}