@using Braintree
<h3>DepositCustomer</h3>
@inject IJSRuntime JS
@page "/Deposit"

@*@if(content == null)
{
    <div>Loadding</div>
}
else
{
    <div>@content</div>

}*@
<div>@content</div>
<input type="number" step="0.01" min="0.01" @bind="cash"/>
<button @onclick="Cash">Ok</button>

<div id="dropin-container"></div>
    <form id="payment-form" method="post">
        <!-- Putting the empty container you plan to pass to
        `braintree.dropin.create` inside a form will make layout and flow
        easier to manage -->
        <input type="submit" style="@divCSS"/>
        <input type="hidden" id="nonce" name="nonce"/>
        <input type="hidden" id="cash" name="cash"/>
    </form>
    <div id="paypal-button"></div>



    @code{
        private string content;
        private double cash = 0;
        private string clientToken;
        protected string divCSS = "display: none;";
        protected void DivCSS(string divCSS)
        {
            this.divCSS = divCSS;
        }
        private DotNetObjectReference<DepositCustomer> objRef;
        private async Task Cash()
        {
            try
            {
                clientToken = new string(await _httpClient.GetFromJsonAsync<char[]>("Customer/Deposit"));

                objRef = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("Deposit", objRef, clientToken, cash);
                DivCSS("display: block;");
            }
            catch (Exception)
            {
            }
        }

        [JSInvokable]
        public async Task Test(string test, string test2, string test3)
        {
            content = await (await _httpClient.PostAsJsonAsync<List<string>>($"Customer/{test3}", new List<string>() { test, test2 })).Content.ReadAsStringAsync();
            StateHasChanged();
        }
    }